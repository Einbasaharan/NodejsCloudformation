AWSTemplateFormatVersion: 2010-09-09
Resources:
  #Creating VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
 #internetgateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC 
      InternetGatewayId: !Ref InternetGateway
  #subnet creation
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  #Publicroutetable Creation 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  #Adding Routetabled to relevant subnets
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  ECSCluster:
    Type: AWS::ECS::Cluster
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for ecs
      VpcId: !Ref VPC
  PublicLBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ebabled for public Lb
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  EcsSecurityGroupPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:  !Ref EcsSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLBSG'
  EcsSecurityGroupSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:  !Ref EcsSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EcsSecurityGroup
  PublicLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB  
      SecurityGroups: [!Ref 'PublicLBSG']
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6 
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: webapp
      Port: 3000
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
  PublicLBlistner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLB
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLB
      Port: 80
      Protocol: HTTP
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - ec2:AttachNetworkInterface
                - ec2:CreateNetworkInterface
                - ec2:CreateNetworkInterfacePermission
                - ec2:DeleteNetworkInterface
                - ec2:DeleteNetworkInterfacePermission
                - ec2:Describe*
                - ec2:DetachNetworkInterface
                - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                - elasticloadbalancing:DeregisterTargets
                - elasticloadbalancing:Describe*
                - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                - elasticloadbalancing:RegisterTargets
              Resource: '*'
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
              Resource: '*'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: webapp
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn:  !Ref ExecutionRole
      ContainerDefinitions:
        - Name: webapp
          Cpu: 256
          Memory: 512
          Image: '862996217015.dkr.ecr.us-east-1.amazonaws.com/webapp:latest'
          PortMappings:
            - ContainerPort: 3000
          
  Service:
    Type: AWS::ECS::Service
    DependsOn: LBRule
    Properties:
      ServiceName: webapp
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref 'EcsSecurityGroup']
          Subnets: 
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: webapp
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
  LBRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: 
            - '*' 
      ListenerArn: !Ref PublicLBlistner
      Priority: 1
Outputs:
  DnsEndpoint:
    Description: Public dns Endpoint 
    Value: !Join ['', ['http://', !GetAtt 'PublicLB.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'DnsEndpoint' ] ]
